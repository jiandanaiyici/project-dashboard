version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: project-management-postgres
    environment:
      POSTGRES_DB: project_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - project-network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: project-management-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - project-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # 后端API服务器
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: project-management-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: project_management
      DB_USER: postgres
      DB_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      FRONTEND_URL: http://localhost:5173
    ports:
      - "3000:3000"
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - project-network
    restart: unless-stopped

  # 前端应用
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: project-management-frontend
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - project-network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: project-management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - project-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  project-network:
    driver: bridge
